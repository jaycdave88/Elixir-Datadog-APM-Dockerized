{application,dogma,
             [{applications,[kernel,stdlib,elixir]},
              {description,"A code style linter for Elixir, powered by shame."},
              {modules,['Elixir.Dogma','Elixir.Dogma.Config',
                        'Elixir.Dogma.Documentation.FormattersList',
                        'Elixir.Dogma.Documentation.RuleList',
                        'Elixir.Dogma.Error','Elixir.Dogma.Formatter',
                        'Elixir.Dogma.Formatter.Flycheck',
                        'Elixir.Dogma.Formatter.JSON',
                        'Elixir.Dogma.Formatter.Null',
                        'Elixir.Dogma.Formatter.Simple','Elixir.Dogma.Rule',
                        'Elixir.Dogma.Rule.ComparisonToBoolean',
                        'Elixir.Dogma.Rule.DebuggerStatement',
                        'Elixir.Dogma.Rule.ExceptionName',
                        'Elixir.Dogma.Rule.FinalCondition',
                        'Elixir.Dogma.Rule.FinalNewline',
                        'Elixir.Dogma.Rule.FunctionArity',
                        'Elixir.Dogma.Rule.FunctionName',
                        'Elixir.Dogma.Rule.HardTabs',
                        'Elixir.Dogma.Rule.InterpolationOnlyString',
                        'Elixir.Dogma.Rule.LineLength',
                        'Elixir.Dogma.Rule.LiteralInCondition',
                        'Elixir.Dogma.Rule.LiteralInInterpolation',
                        'Elixir.Dogma.Rule.MatchInCondition',
                        'Elixir.Dogma.Rule.ModuleAttributeName',
                        'Elixir.Dogma.Rule.ModuleDoc',
                        'Elixir.Dogma.Rule.ModuleName',
                        'Elixir.Dogma.Rule.NegatedAssert',
                        'Elixir.Dogma.Rule.NegatedIfUnless',
                        'Elixir.Dogma.Rule.PipelineStart',
                        'Elixir.Dogma.Rule.PredicateName',
                        'Elixir.Dogma.Rule.QuotesInString',
                        'Elixir.Dogma.Rule.Semicolon',
                        'Elixir.Dogma.Rule.TrailingBlankLines',
                        'Elixir.Dogma.Rule.TrailingWhitespace',
                        'Elixir.Dogma.Rule.UnlessElse',
                        'Elixir.Dogma.Rule.VariableName',
                        'Elixir.Dogma.Rule.WindowsLineEndings',
                        'Elixir.Dogma.RuleSet','Elixir.Dogma.RuleSet.All',
                        'Elixir.Dogma.Rules','Elixir.Dogma.Script',
                        'Elixir.Dogma.Script.InvalidScriptError',
                        'Elixir.Dogma.ScriptSources','Elixir.Dogma.Util.AST',
                        'Elixir.Dogma.Util.Comment',
                        'Elixir.Dogma.Util.CyclomaticComplexity',
                        'Elixir.Dogma.Util.Lines','Elixir.Dogma.Util.Name',
                        'Elixir.Dogma.Util.ScriptStrings',
                        'Elixir.Mix.Tasks.Dogma']},
              {registered,[]},
              {vsn,"0.0.11"}]}.
